{"ast":null,"code":"import axios from 'axios';\n\n// Base API configuration\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for adding auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for handling errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const dashboardService = {\n  // Get dashboard data\n  getDashboardData: async dateFilter => {\n    try {\n      const response = await api.get('/dashboard', {\n        params: {\n          month: dateFilter.month,\n          year: dateFilter.year\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      throw error;\n    }\n  },\n  // Get metrics data\n  getMetrics: async dateFilter => {\n    try {\n      const response = await api.get('/metrics', {\n        params: {\n          month: dateFilter.month,\n          year: dateFilter.year\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching metrics:', error);\n      throw error;\n    }\n  },\n  // Get chart data\n  getChartData: async (chartType, dateFilter) => {\n    try {\n      const response = await api.get(`/charts/${chartType}`, {\n        params: {\n          month: dateFilter.month,\n          year: dateFilter.year\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching ${chartType} chart data:`, error);\n      throw error;\n    }\n  },\n  // Get CAC & CLTV data\n  getCACCLTVData: async dateFilter => {\n    try {\n      const response = await api.get('/charts/cac-cltv', {\n        params: {\n          month: dateFilter.month,\n          year: dateFilter.year\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching CAC & CLTV data:', error);\n      throw error;\n    }\n  },\n  // Get MRR growth data\n  getMRRGrowthData: async dateFilter => {\n    try {\n      const response = await api.get('/charts/mrr-growth', {\n        params: {\n          month: dateFilter.month,\n          year: dateFilter.year\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MRR growth data:', error);\n      throw error;\n    }\n  },\n  // Get MRR percentage data\n  getMRRPercentageData: async dateFilter => {\n    try {\n      const response = await api.get('/charts/mrr-percentage', {\n        params: {\n          month: dateFilter.month,\n          year: dateFilter.year\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MRR percentage data:', error);\n      throw error;\n    }\n  },\n  // Update metric value (for real-time updates)\n  updateMetric: async (metricId, value) => {\n    try {\n      const response = await api.put(`/metrics/${metricId}`, {\n        value\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating metric:', error);\n      throw error;\n    }\n  },\n  // Get real-time updates\n  getRealTimeUpdates: async () => {\n    try {\n      const response = await api.get('/dashboard/realtime');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching real-time updates:', error);\n      throw error;\n    }\n  },\n  // Export dashboard data\n  exportDashboardData: async (format = 'csv', dateFilter) => {\n    try {\n      const response = await api.get('/dashboard/export', {\n        params: {\n          format,\n          month: dateFilter.month,\n          year: dateFilter.year\n        },\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error exporting dashboard data:', error);\n      throw error;\n    }\n  }\n};\nexport default dashboardService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","dashboardService","getDashboardData","dateFilter","get","params","month","year","data","console","getMetrics","getChartData","chartType","getCACCLTVData","getMRRGrowthData","getMRRPercentageData","updateMetric","metricId","value","put","getRealTimeUpdates","exportDashboardData","format","responseType"],"sources":["D:/dashboard/src/services/dashboardService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base API configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for adding auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for handling errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      localStorage.removeItem('authToken');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const dashboardService = {\r\n  // Get dashboard data\r\n  getDashboardData: async (dateFilter) => {\r\n    try {\r\n      const response = await api.get('/dashboard', {\r\n        params: {\r\n          month: dateFilter.month,\r\n          year: dateFilter.year,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get metrics data\r\n  getMetrics: async (dateFilter) => {\r\n    try {\r\n      const response = await api.get('/metrics', {\r\n        params: {\r\n          month: dateFilter.month,\r\n          year: dateFilter.year,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching metrics:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get chart data\r\n  getChartData: async (chartType, dateFilter) => {\r\n    try {\r\n      const response = await api.get(`/charts/${chartType}`, {\r\n        params: {\r\n          month: dateFilter.month,\r\n          year: dateFilter.year,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching ${chartType} chart data:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get CAC & CLTV data\r\n  getCACCLTVData: async (dateFilter) => {\r\n    try {\r\n      const response = await api.get('/charts/cac-cltv', {\r\n        params: {\r\n          month: dateFilter.month,\r\n          year: dateFilter.year,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching CAC & CLTV data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get MRR growth data\r\n  getMRRGrowthData: async (dateFilter) => {\r\n    try {\r\n      const response = await api.get('/charts/mrr-growth', {\r\n        params: {\r\n          month: dateFilter.month,\r\n          year: dateFilter.year,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching MRR growth data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get MRR percentage data\r\n  getMRRPercentageData: async (dateFilter) => {\r\n    try {\r\n      const response = await api.get('/charts/mrr-percentage', {\r\n        params: {\r\n          month: dateFilter.month,\r\n          year: dateFilter.year,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching MRR percentage data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update metric value (for real-time updates)\r\n  updateMetric: async (metricId, value) => {\r\n    try {\r\n      const response = await api.put(`/metrics/${metricId}`, { value });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating metric:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get real-time updates\r\n  getRealTimeUpdates: async () => {\r\n    try {\r\n      const response = await api.get('/dashboard/realtime');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching real-time updates:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Export dashboard data\r\n  exportDashboardData: async (format = 'csv', dateFilter) => {\r\n    try {\r\n      const response = await api.get('/dashboard/export', {\r\n        params: {\r\n          format,\r\n          month: dateFilter.month,\r\n          year: dateFilter.year,\r\n        },\r\n        responseType: 'blob',\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error exporting dashboard data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default dashboardService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}