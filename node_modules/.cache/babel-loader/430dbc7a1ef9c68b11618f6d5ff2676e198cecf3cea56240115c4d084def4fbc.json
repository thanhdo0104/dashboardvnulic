{"ast":null,"code":"// Configuration for the application\nexport const config = {\n  // API Configuration\n  api: {\n    baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api',\n    timeout: 10000,\n    retryAttempts: 3\n  },\n  // Development mode settings\n  development: {\n    useMockData: process.env.REACT_APP_USE_MOCK_DATA !== 'false',\n    // Default to true\n    enableLogging: process.env.REACT_APP_ENABLE_LOGGING !== 'false',\n    // Default to true\n    enableErrorBoundary: true\n  },\n  // Production mode settings\n  production: {\n    useMockData: process.env.REACT_APP_USE_MOCK_DATA === 'true',\n    // Default to false\n    enableLogging: process.env.REACT_APP_ENABLE_LOGGING === 'true',\n    // Default to false\n    enableErrorBoundary: true\n  },\n  // Chart configuration\n  charts: {\n    animationDuration: 1000,\n    responsive: true,\n    maintainAspectRatio: false\n  },\n  // Real-time updates\n  realtime: {\n    enabled: process.env.REACT_APP_USE_MOCK_DATA !== 'true',\n    // Disable if using mock data\n    interval: 30000 // 30 seconds\n  },\n  // Date picker configuration\n  datePicker: {\n    dateFormat: 'MMMM yyyy',\n    showMonthYearPicker: true,\n    showFullMonthYearPicker: true\n  }\n};\n\n// Get current environment\nexport const isDevelopment = process.env.NODE_ENV === 'development';\nexport const isProduction = process.env.NODE_ENV === 'production';\n\n// Get current config based on environment\nexport const getCurrentConfig = () => {\n  return {\n    ...config,\n    ...(isDevelopment ? config.development : config.production)\n  };\n};\nexport default config;","map":{"version":3,"names":["config","api","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","retryAttempts","development","useMockData","REACT_APP_USE_MOCK_DATA","enableLogging","REACT_APP_ENABLE_LOGGING","enableErrorBoundary","production","charts","animationDuration","responsive","maintainAspectRatio","realtime","enabled","interval","datePicker","dateFormat","showMonthYearPicker","showFullMonthYearPicker","isDevelopment","NODE_ENV","isProduction","getCurrentConfig"],"sources":["D:/dashboard/src/config/index.js"],"sourcesContent":["// Configuration for the application\r\nexport const config = {\r\n  // API Configuration\r\n  api: {\r\n    baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api',\r\n    timeout: 10000,\r\n    retryAttempts: 3,\r\n  },\r\n  \r\n  // Development mode settings\r\n  development: {\r\n    useMockData: process.env.REACT_APP_USE_MOCK_DATA !== 'false', // Default to true\r\n    enableLogging: process.env.REACT_APP_ENABLE_LOGGING !== 'false', // Default to true\r\n    enableErrorBoundary: true,\r\n  },\r\n  \r\n  // Production mode settings\r\n  production: {\r\n    useMockData: process.env.REACT_APP_USE_MOCK_DATA === 'true', // Default to false\r\n    enableLogging: process.env.REACT_APP_ENABLE_LOGGING === 'true', // Default to false\r\n    enableErrorBoundary: true,\r\n  },\r\n  \r\n  // Chart configuration\r\n  charts: {\r\n    animationDuration: 1000,\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  },\r\n  \r\n  // Real-time updates\r\n  realtime: {\r\n    enabled: process.env.REACT_APP_USE_MOCK_DATA !== 'true', // Disable if using mock data\r\n    interval: 30000, // 30 seconds\r\n  },\r\n  \r\n  // Date picker configuration\r\n  datePicker: {\r\n    dateFormat: 'MMMM yyyy',\r\n    showMonthYearPicker: true,\r\n    showFullMonthYearPicker: true,\r\n  },\r\n};\r\n\r\n// Get current environment\r\nexport const isDevelopment = process.env.NODE_ENV === 'development';\r\nexport const isProduction = process.env.NODE_ENV === 'production';\r\n\r\n// Get current config based on environment\r\nexport const getCurrentConfig = () => {\r\n  return {\r\n    ...config,\r\n    ...(isDevelopment ? config.development : config.production),\r\n  };\r\n};\r\n\r\nexport default config;\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,MAAM,GAAG;EACpB;EACAC,GAAG,EAAE;IACHC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;IAC1EC,OAAO,EAAE,KAAK;IACdC,aAAa,EAAE;EACjB,CAAC;EAED;EACAC,WAAW,EAAE;IACXC,WAAW,EAAEN,OAAO,CAACC,GAAG,CAACM,uBAAuB,KAAK,OAAO;IAAE;IAC9DC,aAAa,EAAER,OAAO,CAACC,GAAG,CAACQ,wBAAwB,KAAK,OAAO;IAAE;IACjEC,mBAAmB,EAAE;EACvB,CAAC;EAED;EACAC,UAAU,EAAE;IACVL,WAAW,EAAEN,OAAO,CAACC,GAAG,CAACM,uBAAuB,KAAK,MAAM;IAAE;IAC7DC,aAAa,EAAER,OAAO,CAACC,GAAG,CAACQ,wBAAwB,KAAK,MAAM;IAAE;IAChEC,mBAAmB,EAAE;EACvB,CAAC;EAED;EACAE,MAAM,EAAE;IACNC,iBAAiB,EAAE,IAAI;IACvBC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE;EACvB,CAAC;EAED;EACAC,QAAQ,EAAE;IACRC,OAAO,EAAEjB,OAAO,CAACC,GAAG,CAACM,uBAAuB,KAAK,MAAM;IAAE;IACzDW,QAAQ,EAAE,KAAK,CAAE;EACnB,CAAC;EAED;EACAC,UAAU,EAAE;IACVC,UAAU,EAAE,WAAW;IACvBC,mBAAmB,EAAE,IAAI;IACzBC,uBAAuB,EAAE;EAC3B;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGvB,OAAO,CAACC,GAAG,CAACuB,QAAQ,KAAK,aAAa;AACnE,OAAO,MAAMC,YAAY,GAAGzB,OAAO,CAACC,GAAG,CAACuB,QAAQ,KAAK,YAAY;;AAEjE;AACA,OAAO,MAAME,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAO;IACL,GAAG7B,MAAM;IACT,IAAI0B,aAAa,GAAG1B,MAAM,CAACQ,WAAW,GAAGR,MAAM,CAACc,UAAU;EAC5D,CAAC;AACH,CAAC;AAED,eAAed,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}